snippet once "Header guard" b
#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-0]+', '_', snip.fn).upper() + '_'
	snip.rv = name
else:
	snip.rv = snip.c
`}
#define $1

$0

#endif  // $1
endsnippet


snippet ns "Namespace" b
namespace ${1:identifier} {

$0

}  // namespace $1
endsnippet


snippet cl "Class" b
class ${1:Object}
{
public:
	$1($1 const& other) = delete;
	$1& operator=($1 const& rhs) = delete;

private:
	$0
};
endsnippet


snippet clw "Class for Wrapper" b
class ${1:Wrapper}
{
public:
	$1();
	~$1();

	$1($1 const& other) = delete;
	$1& operator=($1 const& rhs) = delete;

	operator $2() const noexcept { return $3; }

private:
	${2:int} ${3:object_};
};
endsnippet


snippet cb "Comment Block" b
// --------------------
// $1
// --------------------
$0
endsnippet


snippet try "Try...Catch" b
try {
}
catch (std::exception const& e) {
	${0}
}
endsnippet


snippet cle "Exception class" b
class ${1:Exception}: public std::exception
{
public:
	$1($0);

	auto what() const noexcept -> char const * override { return message_.c_str(); }

private:
	std::string const message_;
};
endsnippet
