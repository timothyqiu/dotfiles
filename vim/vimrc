" plugins
call plug#begin()

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-unimpaired'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeFind' }
Plug 'posva/vim-vue', { 'for': 'vue' }
Plug 'vim-scripts/a.vim', { 'for': ['c', 'cpp'] }
" Plug 'justmao945/vim-clang', { 'for': ['c', 'cpp'] }
Plug 'keith/swift.vim', { 'for': ['swift'] }
Plug 'Vimjas/vim-python-pep8-indent', { 'for': ['python'] }
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
Plug 'chr4/nginx.vim'
Plug 'lifepillar/pgsql.vim'
Plug 'christoomey/vim-system-copy'
Plug 'itchyny/lightline.vim'
Plug 'cespare/vim-toml'
Plug 'skywind3000/asyncrun.vim'

if executable('ag')
	Plug 'gabesoft/vim-ags'
endif

if has('python') || has('python3')
	if has('job') && has('timers') && has('lambda')
		Plug 'maralla/completor.vim'
	endif
	Plug 'SirVer/ultisnips'
endif

if has('job') && executable('ctags')
	Plug 'ludovicchabant/vim-gutentags'
endif

call plug#end()

" eye candy
set background=dark
set hlsearch
set wildignore+=*.pyc,*/__pycache__,*/node_modules,*/htmlcov,*/build,*.o,*.obj,*/.git,*.swp
set wildmode=longest:full,full
set scrolloff=4

" for quick movement
set relativenumber
set number

" show possible mistakes
set listchars=tab:→\ ,trail:␣
set list
set colorcolumn=
highlight SpecialKey ctermfg=DarkGray

" spaces matters
set shiftwidth=4
set softtabstop=4
set tabstop=4
set noexpandtab

" c indent options
" :0  => don't indent `case` in `switch`
" l1  => brace after `case`
" g0  => don't indent `public` in `class`
" N-s => don't indent things in `namespace`
" E-s => don't indent things in `extern "C"`
" (0  => indent newlines in parentheseses
set cinoptions=:0l1g0N-sE-s(0j1

" allow hidden buffers for bulk editing of files
set hidden

fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
nnoremap <leader>f :call ShowFuncName() <CR>

" NERDTree
let NERDTreeRespectWildIgnore = 1
let NERDTreeQuitOnOpen = 1
let NERDTreeMinimalUI = 1
let NERDTreeShowHidden = 1
map <C-n> :NERDTreeFind<CR>

" Ctrl-P
let g:ctrlp_working_path_mode = 'ra'

" a.vim
let g:alternateNoDefaultAlternate = 1

" vim-ags
nnoremap <Leader>s :Ags<Space><C-R>=expand('<cword>')<CR><CR>
vnoremap <Leader>s y:Ags<Space><C-R>='"' . escape(@", '"*?()[]{}.') . '"'<CR><CR>
nnoremap <Leader>a :Ags<Space>
nnoremap <Leader><Leader>a :AgsQuit<CR>

" vim-gutentags
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
if !isdirectory(s:vim_tags)
	silent! call mkdir(s:vim_tags, 'p')
endif

" UltiSnips
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsJumpForwardTrigger="<CR>"

" vim-clang
let g:clang_compilation_database = './build'

" vim-lightline
set noshowmode  " since it's already in the lightline

" asyncrun
let g:asyncrun_open=8
let g:asyncrun_bell=1
nnoremap <leader>c :AsyncRun cmake --build build <cr>
nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>
