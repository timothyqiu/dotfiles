" --------------------
"  Plugins
" --------------------
call plug#begin()

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-speeddating'

Plug 'skywind3000/asyncrun.vim'
Plug 'skywind3000/asynctasks.vim'

Plug 'gruvbox-community/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeFind' }
Plug 'vim-scripts/a.vim', { 'for': ['c', 'cpp'] }
Plug 'vim-scripts/restore_view.vim'
Plug 'pseewald/vim-anyfold'
Plug 'christoomey/vim-system-copy'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'junegunn/fzf.vim'
Plug 'thinca/vim-localrc'

Plug 'Vimjas/vim-python-pep8-indent', { 'for': ['python'] }
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
Plug 'chr4/nginx.vim'
Plug 'lifepillar/pgsql.vim'
Plug 'cespare/vim-toml'
Plug 'tikhomirov/vim-glsl'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'zah/nim.vim'

if has('python') || has('python3')
	"Plug 'SirVer/ultisnips'
endif

call plug#end()

" --------------------
"  General Vim Config
" --------------------

set updatetime=400
set mouse=a

" eye candy
if (empty($TMUX))
	if (has("termguicolors"))
		set termguicolors
	endif
endif

" let g:gruvbox_italic=1
colorscheme gruvbox
" hack for transparent background
autocmd VimEnter * hi Normal ctermbg=NONE guibg=NONE

set background=dark
set hlsearch
set cursorline

set wildignore+=*/node_modules/*
set wildignore+=*/build
set wildignore+=*/.git/*
set wildignore+=*/__pycache__/*
set wildignore+=*.pyc
set wildignore+=*.o
set wildignore+=*.obj
set wildignore+=*.swp

set wildmode=longest:full,full
set scrolloff=4
set signcolumn=number

" folding
set viewoptions=folds,slash,unix
set foldcolumn=2
set foldlevel=99
nnoremap <space> za

" let g:anyfold_fold_toplevel=1
let g:anyfold_fold_comments=1
autocmd Filetype * AnyFoldActivate

" for quick movement
set relativenumber
set number

" show possible mistakes
set listchars=tab:→\ ,trail:␣
set list
set colorcolumn=100

" spaces matters
set shiftwidth=4
set softtabstop=4
set tabstop=4
set noexpandtab

" c indent options
" :0  => don't indent `case` in `switch`
" l1  => brace after `case`
" g0  => don't indent `public` in `class`
" N-s => don't indent things in `namespace`
" E-s => don't indent things in `extern "C"`
" (0  => indent newlines in parentheseses
set cinoptions=:0l1g0N-sE-s(0j1

" allow hidden buffers for bulk editing of files
set hidden

" do something on save
"autocmd BufWritePost CMakeLists.txt AsyncRun cmake -B build -S .
"autocmd BufWritePost conanfile.txt AsyncRun conan install -if build .

" --------------------
"  vim-lsp
" --------------------

let g:lsp_use_lua = has('nvim-0.4.0') || (has('lua') && has('patch-8.2.0775'))
let g:lsp_format_sync_timeout = 800
let g:lsp_diagnostics_echo_cursor = 1

function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gd <plug>(lsp-definition)
	nmap <buffer> gs <plug>(lsp-document-symbol-search)
	nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
	nmap <buffer> gr <plug>(lsp-references)
	nmap <buffer> gi <plug>(lsp-implementation)
	nmap <buffer> gt <plug>(lsp-type-definition)
	nmap <buffer> <leader>rn <plug>(lsp-rename)
	nmap <buffer> [g <plug>(lsp-previous-diagnostic)
	nmap <buffer> ]g <plug>(lsp-next-diagnostic)
	nmap <buffer> K <plug>(lsp-hover)
	inoremap <buffer> <expr><c-f> lsp#scroll(+8)
	inoremap <buffer> <expr><c-b> lsp#scroll(-8)

	" refer to doc to add more commands
endfunction

augroup lsp_install
	au!
	" call s:on_lsp_buffer_enabled only for languages that has the server registered.
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_settings = {
\	'clangd': { 'args': ["-header-insertion=never"] },
\	'godot': { 'disabled': v:true },
\}
let g:lsp_settings_root_markers = ['.git', 'conanfile.txt']

" --------------------
"  NERDTree
" --------------------
let g:NERDTreeRespectWildIgnore = 1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeAutoDeleteBuffer = 1
map <C-n> :NERDTreeFind<CR>

" --------------------
"  a.vim
" --------------------
let g:alternateNoDefaultAlternate = 1

" --------------------
"  UltiSnips
" --------------------
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<cr>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" --------------------
"  vim-lightline
" --------------------
set noshowmode  " since it's already in the lightline
let g:lightline = {'colorscheme': 'gruvbox'}

" --------------------
"  asyncrun
" --------------------
let g:asyncrun_open=8
let g:asyncrun_bell=1
nmap <silent> <leader>r :AsyncTask project-run<cr>
nmap <silent> <leader>c :AsyncTask project-build<cr>
nmap <silent> <leader>q :call asyncrun#quickfix_toggle(6)<cr>


" --------------------
"  asyncomplete.vim
" --------------------
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

let g:asyncomplete_popup_delay = 500
let g:asyncomplete_min_chars = 1

" --------------------
"  fzf
" --------------------

nmap <silent> <C-P> :GFiles<CR>
nmap <leader>f :Files<CR>
nmap <leader>t :BTags<CR>
nmap <leader>rg :Rg! <C-R><C-W>
