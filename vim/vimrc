" --------------------
"  Plugins
" --------------------
call plug#begin()

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

Plug 'skywind3000/asyncrun.vim'
Plug 'skywind3000/asynctasks.vim'

Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeFind' }
Plug 'vim-scripts/a.vim', { 'for': ['c', 'cpp'] }
Plug 'christoomey/vim-system-copy'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'luochen1990/rainbow'

Plug 'Vimjas/vim-python-pep8-indent', { 'for': ['python'] }
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
Plug 'chr4/nginx.vim'
Plug 'lifepillar/pgsql.vim'
Plug 'cespare/vim-toml'
Plug 'tikhomirov/vim-glsl'
Plug 'octol/vim-cpp-enhanced-highlight'

if executable('ag')
	Plug 'gabesoft/vim-ags'
endif

if has('python') || has('python3')
	Plug 'SirVer/ultisnips'
endif

if has('job') && executable('ctags')
	Plug 'ludovicchabant/vim-gutentags'
	Plug 'skywind3000/gutentags_plus'
endif

function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.py --clangd-completer
  endif
endfunction

Plug 'ycm-core/YouCompleteMe', { 'do': function('BuildYCM') }

call plug#end()

" --------------------
"  General Vim Config
" --------------------

set updatetime=400
set mouse=a

" eye candy
if (empty($TMUX))
	if (has("termguicolors"))
		set termguicolors
	endif
endif

" let g:gruvbox_italic=1
colorscheme gruvbox

set background=dark
set hlsearch
set cursorline

set wildignore+=*/node_modules/*
set wildignore+=*/build/*
set wildignore+=*/.git/*
set wildignore+=*/__pycache__/*
set wildignore+=*.pyc
set wildignore+=*.o
set wildignore+=*.obj
set wildignore+=*.swp

set wildmode=longest:full,full
set scrolloff=4
set signcolumn=number

" folding
set foldmethod=syntax
set foldlevelstart=99
set foldminlines=5
set foldopen-=hor
set foldopen+=jump
nnoremap <space> za

" for quick movement
set relativenumber
set number
nnoremap }  }zz
nnoremap {  {zz

" show possible mistakes
set listchars=tab:→\ ,trail:␣
set list
set colorcolumn=100

" spaces matters
set shiftwidth=4
set softtabstop=4
set tabstop=4
set noexpandtab

" c indent options
" :0  => don't indent `case` in `switch`
" l1  => brace after `case`
" g0  => don't indent `public` in `class`
" N-s => don't indent things in `namespace`
" E-s => don't indent things in `extern "C"`
" (0  => indent newlines in parentheseses
set cinoptions=:0l1g0N-sE-s(0j1

" allow hidden buffers for bulk editing of files
set hidden

" do something on save
autocmd BufWritePost $MYVIMRC source $MYVIMRC
autocmd BufWritePost CMakeLists.txt AsyncRun cmake -B build -S .
autocmd BufWritePost conanfile.txt AsyncRun conan install -if build .

" --------------------
"  NERDTree
" --------------------
let NERDTreeRespectWildIgnore = 1
let NERDTreeQuitOnOpen = 1
let NERDTreeMinimalUI = 1
let NERDTreeShowHidden = 1
map <C-n> :NERDTreeFind<CR>

" --------------------
"  Ctrl-P
" --------------------
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['conanfile.txt', '.root']

" --------------------
"  a.vim
" --------------------
let g:alternateNoDefaultAlternate = 1

" --------------------
"  vim-ags
" --------------------
nnoremap <Leader>s :Ags<Space><C-R>=expand('<cword>')<CR><CR>
vnoremap <Leader>s y:Ags<Space><C-R>='"' . escape(@", '"*?()[]{}.') . '"'<CR><CR>
nnoremap <Leader>a :Ags<Space>
nnoremap <Leader><Leader>a :AgsQuit<CR>

" --------------------
"  vim-gutentags
" --------------------
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['.git', 'conanfile.txt', '.root']

let g:gutentags_ctags_tagfile = '.tags'

let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif

let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags)
	silent! call mkdir(s:vim_tags, 'p')
endif

let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
let g:gutentags_auto_add_gtags_cscope = 0

" --------------------
"  gutentags_plus
" --------------------
let g:gutentags_plus_switch = 1
let g:gutentags_plus_nomap = 0

" --------------------
"  UltiSnips
" --------------------
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsJumpForwardTrigger="<CR>"

" --------------------
"  vim-lightline
" --------------------
set noshowmode  " since it's already in the lightline
let g:lightline = {'colorscheme': 'gruvbox'}

" --------------------
"  asyncrun
" --------------------
let g:asyncrun_open=8
let g:asyncrun_bell=1
nnoremap <silent><nowait><leader>q :call asyncrun#quickfix_toggle(6)<cr>
nnoremap <silent><nowait><leader>r :AsyncTask run<cr>
nnoremap <silent><nowait><leader>c :AsyncTask build<cr>

" --------------------
"  YouCompleteMe
" --------------------
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_auto_hover = ''

nmap <leader>D <plug>(YCMHover)

set completeopt=menu,menuone
if has('patch-8.0.1000')
	set completeopt+=noselect
endif
if exists('+completepopup')
	set completepopup=align:menu,border:off,highlight:QuickPreview
	set completeopt+=popup
endif

nnoremap gd :YcmCompleter GoTo<cr>

" --------------------
"  Rainbow
" --------------------
nnoremap <leader>p :RainbowToggle<cr>
